ARM GAS  agra.s 			page 1


   1              	    .text
   2              	    .align 2
   3              	    .global matmul
   4              	    .type matmul, %function
   5              	
   6              	
   7              	@ int matmul(int h1, int w1, int *m1, int h2, int w2, int *m2, int *m3)
   8              	@ h1 -> r0
   9              	@ w1 -> r1
  10              	@ *m1 -> r2
  11              	@ h2 -> r3
  12              	@ w2 -> SP     !!! Neaizmirst nobīdi pēc push SP+40
  13              	@ *m2 -> SP+4  !!! Neaizmirst nobīdi pēc push SP+44
  14              	@ *m3 -> SP+8  !!! Neaizmirst nobīdi pēc push SP+48
  15              	
  16              	matmul:
  17              	    @ Save callee-saved registers and link register
  18 0000 F05F2DE9 	    push {r4, r5, r6, r7, r8, r9, r10, r11, r12, lr}    @SP 0 -> SP 40
  19              	
  20              	    @ Reasign params
  21 0004 0080A0E1 	    mov r8, r0         @ r8 = h1
  22 0008 0190A0E1 	    mov r9, r1         @ r9 = w1
  23 000c 02A0A0E1 	    mov r10, r2        @ r10 = m1
  24 0010 03B0A0E1 	    mov r11, r3        @ r11 = h2
  25 0014 28409DE5 	    ldr r4, [sp, #40]  @ Load 5th parameter (w2) into r4
  26 0018 2C509DE5 	    ldr r5, [sp, #44]  @ Load 6th parameter (m2) into r5
  27 001c 30609DE5 	    ldr r6, [sp, #48]  @ Load 7th parameter (m3) into r6
  28              	
  29              	    @ Check if any of the dimensions (h1, w1, h2, w2) are smaller than 0
  30 0020 000058E3 	    cmp r8, #0
  31 0024 240000DA 	    ble error
  32 0028 000059E3 	    cmp r9, #0
  33 002c 220000DA 	    ble error
  34 0030 00005BE3 	    cmp r11, #0
  35 0034 200000DA 	    ble error
  36 0038 000054E3 	    cmp r4, #0
  37 003c 1E0000DA 	    ble error
  38              	
  39              	    @ For matrix multiplication, the number of columns in the first matrix 
  40              	    @ must be equal to the number of rows in the second matrix.
  41 0040 0B0059E1 	    cmp r9, r11
  42 0044 1C00001A 	    bne error
  43              	    
  44 0048 0000A0E3 	    mov r0, #0         @ Initialize row counter (i) to 0
  45              	
  46              	outer_loop:
  47 004c 080050E1 	    cmp r0, r8         @ Compare i with h1
  48 0050 1B0000AA 	    bge success        @ Exit if i >= h1
  49              	    
  50 0054 0010A0E3 	    mov r1, #0         @ Initialize column counter (j) to 0
  51              	
  52              	column_loop:
  53 0058 040051E1 	    cmp r1, r4         @ Compare j with w2
  54 005c 140000AA 	    bge next_row       @ Exit if j >= w2
  55              	    
  56 0060 0020A0E3 	    mov r2, #0         @ Initialize sum to 0
  57 0064 0030A0E3 	    mov r3, #0         @ Initialize element counter (k) to 0
ARM GAS  agra.s 			page 2


  58              	
  59              	inner_loop:
  60 0068 090053E1 	    cmp r3, r9         @ Compare k with w1
  61 006c 0A0000AA 	    bge store_result   @ Exit if k >= w1
  62              	    
  63              	    @ Load m1[i * w1 + k]
  64 0070 900907E0 	    mul r7, r0, r9     @ r7 = i * w1
  65 0074 037087E0 	    add r7, r7, r3     @ r7 = i * w1 + k
  66 0078 0771A0E1 	    lsl r7, r7, #2     @ r7 = (i * w1 + k) * 4
  67 007c 07C09AE7 	    ldr r12, [r10, r7] @ r12 = m1[i * w1 + k]
  68              	    
  69              	    @ Load m2[k * w2 + j]
  70 0080 930407E0 	    mul r7, r3, r4     @ r7 = k * w2
  71 0084 017087E0 	    add r7, r7, r1     @ r7 = k * w2 + j
  72 0088 0771A0E1 	    lsl r7, r7, #2     @ r7 = (k * w2 + j) * 4
  73 008c 077095E7 	    ldr r7, [r5, r7]   @ r7 = m2[k * w2 + j]
  74              	
  75              	    @ Perform sum += m1[i * w1 + k] * m2[k * w2 + j]
  76 0090 9C2722E0 	    mla r2, r12, r7, r2
  77              	
  78 0094 013083E2 	    add r3, r3, #1     @ Increment k
  79 0098 F2FFFFEA 	    b inner_loop       @ Continue to next k
  80              	
  81              	store_result:
  82              	    @ Store result in m3[i * w2 + j]
  83 009c 900407E0 	    mul r7, r0, r4     @ r7 = i * w2
  84 00a0 017087E0 	    add r7, r7, r1     @ r7 = i * w2 + j
  85 00a4 0771A0E1 	    lsl r7, r7, #2     @ r7 = (i * w2 + j) * 4
  86 00a8 072086E7 	    str r2, [r6, r7]   @ m3[i * w2 + j] = sum
  87              	    
  88 00ac 011081E2 	    add r1, r1, #1     @ Increment j
  89 00b0 E8FFFFEA 	    b column_loop      @ Continue to next column
  90              	
  91              	next_row:
  92 00b4 010080E2 	    add r0, r0, #1     @ Increment i
  93 00b8 E3FFFFEA 	    b outer_loop       @ Continue to next row
  94              	
  95              	error:
  96 00bc 0100A0E3 	    mov r0, #1         @ Return 1 (error)
  97 00c0 010000EA 	    b end
  98              	
  99              	success:
 100 00c4 0000A0E3 	    mov r0, #0         @ Return 0 (success)
 101 00c8 FFFFFFEA 	    b end
 102              	
 103              	end:
 104 00cc F09FBDE8 	    pop {r4, r5, r6, r7, r8, r9, r10, r11, r12, pc}  @ Restore registers and return
